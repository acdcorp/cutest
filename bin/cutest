#!/usr/bin/env ruby

ENV['RACK_ENV'] ||= 'test'

if ARGV.empty?
  puts "usage: cutest [-r lib] [-v] file [-b (backtrace) [-p (pry rescue)]]"
  exit
end

require_relative "../lib/cutest"
require "clap"
require "mocoso"

files = Clap.run ARGV,
  "-r"      => lambda { |file| require file },
  "-t"      => lambda { |name| cutest[:only] = name },
  "-s"      => lambda { |name| cutest[:scope] = name },
  "-w"      => lambda { |name| cutest[:warnings] = true },
  "-b"      => lambda { cutest[:backtrace] = true },
  "-p"      => lambda {
    ENV['PRY_RESCUE'] = 'true'; cutest[:pry_rescue] = true
  },
  "-v"      => lambda { puts Cutest::VERSION }

if files.any?
  begin
    env      = '.env'
    rack_env = ".#{env}.#{ENV['RACK_ENV']}"

    if File.file? rack_env
      Cutest.load_envs rack_env
    elsif File.file? env
      Cutest.load_envs env
    end

    success = Cutest.run(Dir[*files])

    exit(1) unless success
  rescue ThreadError
    # Ignore this as it's caused by Process.waitall when using -p
  end
end
